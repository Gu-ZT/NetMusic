plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

allprojects {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenLocal()
        mavenCentral()
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "netmusic" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

fabricApi {
    configureDataGeneration()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    implementation include("com.googlecode.soundlibs:mp3spi:1.9.5.4")
    implementation include("com.googlecode.soundlibs:jlayer:1.0.1.4")
    implementation include("com.googlecode.soundlibs:tritonus-share:0.3.7.4")
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation include("dev.isxander:yet-another-config-lib:3.5.0+1.21-fabric")
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // JEI
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}